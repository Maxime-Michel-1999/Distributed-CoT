import os
from typing import Optional

from dotenv import load_dotenv
from groq import Groq


class GroqModelCaller:
    def __init__(self, api_key: Optional[str] = None):
        """
        Initialize the Groq client with an API key.

        Args:
            api_key: Groq API key. If not provided, looks for it in .env file
            model: Le modèle à utiliser (par défaut: mixtral-8x7b-32768)
        """
        # Load environment variables from .env
        load_dotenv(dotenv_path=".env")

        self.api_key = api_key or os.getenv("GROQ_API_KEY")
        if not self.api_key:
            raise ValueError("A Groq API key is required in the .env file")
        self.client = Groq(api_key=self.api_key)

    def get_completion(
        self,
        prompt: str,
        model: str = "mixtral-8x7b-32768",
        temperature: float = 0.7,
        max_tokens: int = 1000,
    ) -> tuple[str, int]:
        """
        Get a response from the Groq model.

        Args:
            prompt: The input text for the model
            temperature: Controls creativity (0.0-1.0)
            max_tokens: Maximum number of output tokens

        Returns:
            Tuple containing:
            - The response generated by the model
            - Number of tokens used in the response
        """
        try:
            completion = self.client.chat.completions.create(
                messages=[{"role": "user", "content": prompt}],
                model=model,
                temperature=temperature,
                max_tokens=max_tokens,
            )
            return (
                completion.choices[0].message.content,
                completion.usage.total_tokens,
            )

        except Exception as e:
            raise Exception(f"Error calling Groq model: {str(e)}")
